{"version":3,"sources":["logo.svg","Header.js","Memegenerator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","src","style","width","height","marginTop","fontFamily","fontWeight","fontSize","Toggle","aria-controls","Collapse","id","Nav","Link","eventKey","useStyles1","makeStyles","root","minWidth","bullet","display","margin","transform","title","pos","marginBottom","Memegenerator","theme","spacing","state","toptext","bottomText","randomImg","isLoading","allMemes","handleEvent","bind","handleClick","this","getMemes","fetch","then","response","json","memes","data","console","log","setState","event","preventDefault","randomnum","Math","floor","random","length","randomimage","url","target","name","value","textAlign","className","onSubmit","type","onChange","placeholder","Card","CardContent","alt","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8768b329.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/* eslint-disable react/jsx-no-comment-textnodes */\r\nimport React from \"react\";\r\nimport {\r\n  Navbar,\r\n  Nav,\r\n} from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./Style.css\";\r\nfunction Header() {\r\n  return (\r\n    <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n      <Navbar.Brand href=\"#home\">\r\n        <a href=\"#\">\r\n          <img\r\n            src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface-PNG.png\"\r\n            style={{ width: 70, height: 45, marginTop: -6 }}\r\n          />\r\n        </a>{ \" \" }\r\n        </Navbar.Brand>\r\n        <Navbar.Brand style={{fontFamily:\"Lucida Console, Monaco, monospace\",fontWeight:20,fontSize:30}}>\r\n        Meme Generator\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n        <Nav>\r\n          <Nav.Link href=\"#deets\">More deets</Nav.Link>\r\n          <Nav.Link eventKey={2} href=\"#memes\">\r\n            Dank memes\r\n          </Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\nexport default Header;\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles1 = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiTextField-root\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n}));\r\n\r\nexport default class Memegenerator extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      toptext: \"\",\r\n      bottomText: \"\",\r\n      randomImg: \"\",\r\n      isLoading: true,\r\n      allMemes: [],\r\n    };\r\n    this.handleEvent=this.handleEvent.bind(this);\r\n    this.handleClick=this.handleClick.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.getMemes();\r\n    // this.handleClick();\r\n    \r\n    \r\n  }\r\n  getMemes() {\r\n    fetch(\"https://api.imgflip.com/get_memes\")\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        const { memes } = response.data;\r\n        console.log(memes[0]);\r\n        this.setState({\r\n          isLoading: false,\r\n          allMemes: memes,\r\n        });\r\n      });\r\n  }\r\n  handleClick(event){\r\n    event.preventDefault()\r\n    const randomnum=Math.floor(Math.random() *this.state.allMemes.length)\r\n    const randomimage = this.state.allMemes[randomnum].url;\r\n    this.setState({\r\n        randomImg:randomimage\r\n    })\r\n    \r\n  }\r\n  handleEvent(event){\r\n    const{name,value}=event.target;\r\n    this.setState({\r\n        [name]:value\r\n    })\r\n  }\r\n  render() {\r\n    const loaded = this.state.isLoading;\r\n    // const classes = this.useStyles1();\r\n    if (loaded) {\r\n      return <h1 style={{ textAlign: \"center\" }}>Loading...</h1>;\r\n    } else {\r\n      return (\r\n        <div className=\"form-style-5\">\r\n          <form onSubmit={this.handleClick}>\r\n            <fieldset>\r\n              <input\r\n                type=\"text\"\r\n                name=\"toptext\"\r\n                value={this.state.toptext}\r\n                onChange={this.handleEvent}\r\n                placeholder=\"Top Text\"\r\n              ></input>\r\n              <input\r\n                type=\"text\"\r\n                name=\"bottomText\"\r\n                value={this.state.bottomText}\r\n                onChange={this.handleEvent}\r\n                placeholder=\"Bottom Text\"\r\n              ></input>\r\n              <button >Generate.. </button>\r\n            </fieldset>\r\n            <div>\r\n            <Card className={useStyles1.root}>\r\n            <CardContent className=\"meme\">\r\n                <img src={this.state.randomImg} alt=\"\"/>\r\n                <p className=\"top\">{this.state.toptext}</p>\r\n                <p className=\"bottom\">{this.state.bottomText}</p>\r\n            </CardContent>\r\n            </Card>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport Header from \"./Header\";\nimport Memegenerator from \"./Memegenerator\"\n\nfunction App() {\n  return <div>\n    <Header/>\n    <Memegenerator/>\n  </div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}